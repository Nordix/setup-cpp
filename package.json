{
  "name": "setup-cpp",
  "version": "0.20.1",
  "description": "Install all the tools required for building and testing C++/C projects.",
  "repository": "https://github.com/aminya/setup-cpp",
  "license": "Apache-2.0",
  "author": "Amin Yahyaabadi",
  "exports": {
    "import": "./dist/setup-cpp.mjs",
    "require": "./dist/setup-cpp.js"
  },
  "main": "./dist/setup_cpp.js",
  "source": "./src/main.ts",
  "bin": {
    "setup-cpp": "./dist/setup_cpp.js",
    "setup_cpp": "./dist/setup_cpp.js"
  },
  "scripts": {
    "build": "shx rm -rf dist/ && shx mkdir ./dist && run-p lint.tsc build.parcel copy.matchers",
    "build.docker": "pnpm build && docker build -f ./dev/docker/ubuntu_node.dockerfile -t setup_cpp .",
    "build.docker.arch": "pnpm build && docker build -f ./dev/docker/arch_node.dockerfile -t setup_cpp:arch .",
    "build.docker.fedora": "pnpm build && docker build -f ./dev/docker/fedora_node.dockerfile -t setup_cpp:fedora .",
    "build.docker.ubuntu": "pnpm build && docker build -f ./dev/docker/ubuntu_node.dockerfile -t setup_cpp:ubuntu .",
    "build.parcel": "cross-env NODE_ENV=production parcel build --detailed-report",
    "bump": "ncu -u -x execa,numerous && pnpm update",
    "clean": "shx rm -rf .parcel-cache dist exe",
    "copy.matchers": "shx cp ./src/gcc/gcc_matcher.json ./dist/ && shx cp ./src/msvc/msvc_matcher.json ./dist && shx cp ./src/python/python_matcher.json ./dist/ && shx cp ./src/llvm/llvm_matcher.json ./dist/ ",
    "dev": "cross-env NODE_ENV=development parcel watch",
    "docs": "shx rm -rf packages/*/README.md && pnpm -r exec readme --path ../../dev/readme/template.md -y && pnpm -r exec ts-readme",
    "format": "run-s lint.prettier",
    "lint": "run-p --aggregate-output --continue-on-error lint.cspell lint.eslint lint.prettier lint.tsc",
    "lint.cspell": "cspell lint --no-progress --show-suggestions",
    "lint.eslint": "eslint **/*.{ts,tsx,js,jsx,cjs,mjs,json,yaml} --no-error-on-unmatched-pattern --cache --cache-location ./.cache/eslint/ --fix",
    "lint.prettier": "prettier --write .",
    "lint.tsc": "tsc --noEmit | loose-ts-check",
    "pack.exe": "shx rm -rf ./dist/tsconfig.tsbuildinfo && node ./dev/scripts/pack-exe.js",
    "prepare": "pnpm run -r build && pnpm run -w build",
    "start.docker": "docker run -t setup_cpp .",
    "start.docker.arch": "docker run -t setup_cpp:arch .",
    "start.docker.fedora": "docker run -t setup_cpp:fedora .",
    "start.docker.ubuntu": "docker run -t setup_cpp:ubuntu .",
    "test": "run-p --continue-on-error test.lint test.unit",
    "test.docker.arch": "docker build -f ./dev/docker/arch_node.dockerfile --target base -t setup_cpp:arch-base . && container-structure-test test --image setup_cpp:arch-base --config ./dev/container-tests/arch.yml",
    "test.docker.fedora": "docker build -f ./dev/docker/fedora_node.dockerfile --target base -t setup_cpp:fedora-base . && container-structure-test test --image setup_cpp:fedora-base --config ./dev/container-tests/fedora.yml",
    "test.docker.ubuntu": "docker build -f ./dev/docker/ubuntu_node.dockerfile --target base -t setup_cpp:ubuntu-base . && container-structure-test test --image setup_cpp:ubuntu-base --config ./dev/container-tests/ubuntu.yml",
    "test.lint": "run-p --aggregate-output --continue-on-error lint.cspell test.lint.eslint test.lint.prettier lint.tsc",
    "test.lint.eslint": "eslint **/*.{ts,tsx,js,jsx,cjs,mjs,json,yaml} --no-error-on-unmatched-pattern --cache --cache-location ./.cache/eslint/",
    "test.lint.prettier": "prettier . --check",
    "test.unit": "jest --runInBand"
  },
  "prettier": "prettier-config-atomic",
  "dependencies": {
    "@actions/core": "^1.10.0",
    "@actions/exec": "^1.1.1",
    "@actions/io": "^1.1.2",
    "@actions/tool-cache": "^2.0.1",
    "@npmcli/ci-detect": "github:aminya/ci-detect#37fe40075bebec96794ba0a7c4a6d5c70cbea00d",
    "admina": "^0.1.3",
    "ci-log": "workspace:1.0.0",
    "escape-path-with-spaces": "github:aminya/escape-path-with-spaces#d9f81ee649203ddc55783a2f96ada59df06118e3",
    "exec-powershell": "workspace:1.0.0",
    "execa": "^5.1.1",
    "is-url-online": "^1.5.0",
    "mri": "^1.2.0",
    "msvc-dev-cmd": "github:aminya/msvc-dev-cmd#9f672c1",
    "numerous": "1.0.3",
    "patha": "^0.4.1",
    "setup-python": "github:actions/setup-python#c474c82340438924daab9282d07300bfe7e3692d",
    "semver": "7.3.8",
    "time-delta": "github:aminya/time-delta#69d91a41cef28e569be9a2991129f5f7d1f0d00e",
    "ubuntu-version": "^2.0.0",
    "untildify-user": "workspace:1.0.0",
    "user-access": "workspace:1.0.0",
    "which": "^2.0.2"
  },
  "devDependencies": {
    "@types/cross-spawn": "^6.0.2",
    "@types/jest": "^29.2.0",
    "@types/mri": "^1.1.1",
    "@types/node": "^18.11.2",
    "@types/semver": "^7.3.12",
    "@types/which": "^2.0.1",
    "caxa": "^3.0.1",
    "cross-env": "7.0.3",
    "cross-spawn": "^7.0.3",
    "cspell": "^6.12.0",
    "eslint": "^8.25.0",
    "eslint-config-atomic": "^1.18.1",
    "gen-readme": "^1.6.0",
    "jest": "^29.2.1",
    "loose-ts-check": "^1.2.0",
    "npm-check-updates": "^16.3.14",
    "npm-run-all2": "^6.0.2",
    "parcel": "2.7.0",
    "prettier": "2.7.1",
    "prettier-config-atomic": "^3.1.0",
    "readme-md-generator": "^1.0.0",
    "shx": "0.3.4",
    "terser-config-atomic": "^0.1.1",
    "ts-jest": "^29.0.3",
    "ts-readme": "^1.1.3",
    "typescript": "^4.8.4"
  },
  "engines": {
    "node": ">=12.x"
  },
  "keywords": [
    "github-actions",
    "actions",
    "github",
    "setup-cpp",
    "c++",
    "cpp",
    "cxx",
    "cc",
    "llvm",
    "clang",
    "gcc",
    "mingw",
    "msvc",
    "cl",
    "cmake",
    "ninja",
    "meson"
  ],
  "alias": {
    "electron": false,
    "patha": "patha/dist/index.node.mjs"
  },
  "pnpm": {
    "overrides": {
      "semver": "7.3.8",
      "eslint": "^8.25.0",
      "prettier": "2.7.1",
      "lru-cache": "7.8.1",
      "core-js": "*",
      "babel-eslint": "npm:@babel/eslint-parser"
    },
    "peerDependencyRules": {
      "allowedVersions": {
        "eslint": "*"
      }
    }
  },
  "targets": {
    "main": {
      "context": "node",
      "engines": {
        "node": ">=12.x"
      },
      "includeNodeModules": true,
      "optimize": true,
      "outputFormat": "commonjs"
    }
  }
}
